apiVersion: kots.io/v1beta1
kind: HelmChart
metadata:
  name: samplechart
spec:
  # chart identifies a matching chart from a .tgz
  chart:
    name: oes
    chartVersion: 3.9.3

  exclude: "repl{{ ConfigOptionEquals `include_chart` `include_chart_no`}}"

  # helmVersion identifies the Helm Version used to render the Chart. Default is v2.
  helmVersion: v3
  values:
    installSpinnaker: "repl{{ ConfigOption `installSpinnaker`}}"
    installRedis: "repl{{ ConfigOption `installRedis`}}"
    installationMode: "repl{{ ConfigOption `installationMode`}}"
    secretStore: "repl{{ ConfigOption `secretStore`}}"
    global:
      certManager: 
        installed: "repl{{ ConfigOption `installed`}}"
      commonGate:
        enabled: "repl{{ ConfigOption `cgenabled`}}"
      ssl:
        enabled: "repl{{ ConfigOption `sslenabled`}}"
      createIngress: "repl{{ ConfigOption `createIngress`}}"

  optionalValues:
    - when: "repl{{ ConfigOptionEquals `secretStore` `vault`}}"
      values:
        vault:
          address: "repl{{ if ConfigOptionEquals `secretStore` `vault`}}repl{{ ConfigOption `address`}}repl{{ end}}"
          token: "repl{{ if ConfigOptionEquals `secretStore` `vault`}}repl{{ ConfigOption `token`}}repl{{ end}}"
    - when: "repl{{ ConfigOptionEquals `createIngress` `1`}}"
      values:
        global:
          spinDeck: 
            protocol: "repl{{ if ConfigOptionEquals `createIngress` `1`}}repl{{ ConfigOption `protocol`}}repl{{ end}}"
            host: "repl{{ if ConfigOptionEquals `createIngress` `1`}}repl{{ ConfigOption `host`}}repl{{ end}}"
            serviceAnnotations: "repl{{ if ConfigOptionEquals `createIngress` `1`}}repl{{ ConfigOption `serviceAnnotations`}}repl{{ end}}"
            ingress:
              annotations: "repl{{ if ConfigOptionEquals `createIngress` `1`}}repl{{ ConfigOption `annotations`}}repl{{ end}}"
          spinGate:
            protocol: "repl{{ if ConfigOptionEquals `createIngress` `1`}}repl{{ ConfigOption `protocol`}}repl{{ end}}"
            host: "repl{{ if ConfigOptionEquals `createIngress` `1`}}repl{{ ConfigOption `host`}}repl{{ end}}"
            serviceAnnotations: "repl{{ if ConfigOptionEquals `createIngress` `1`}}repl{{ ConfigOption `serviceAnnotations`}}repl{{ end}}"
            ingress:
              annotations: "repl{{ if ConfigOptionEquals `createIngress` `1`}}repl{{ ConfigOption `annotations`}}repl{{ end}}"
          oesUI:
            protocol: "repl{{ if ConfigOptionEquals `createIngress` `1`}}repl{{ ConfigOption `protocol`}}repl{{ end}}"
            host: "repl{{ if ConfigOptionEquals `createIngress` `1`}}repl{{ ConfigOption `host`}}repl{{ end}}"
            serviceAnnotations: "repl{{ if ConfigOptionEquals `createIngress` `1`}}repl{{ ConfigOption `serviceAnnotations`}}repl{{ end}}"
            ingress:
              annotations: "repl{{ if ConfigOptionEquals `createIngress` `1`}}repl{{ ConfigOption `annotations`}}repl{{ end}}"
          oesGate:
            protocol: "repl{{ if ConfigOptionEquals `createIngress` `1`}}repl{{ ConfigOption `protocol`}}repl{{ end}}"
            host: "repl{{ if ConfigOptionEquals `createIngress` `1`}}repl{{ ConfigOption `host`}}repl{{ end}}"
            serviceAnnotations: "repl{{ if ConfigOptionEquals `createIngress` `1`}}repl{{ ConfigOption `serviceAnnotations`}}repl{{ end}}"
            ingress:
              annotations: "repl{{ if ConfigOptionEquals `createIngress` `1`}}repl{{ ConfigOption `annotations`}}repl{{ end}}"


